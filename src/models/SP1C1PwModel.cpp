
#include <cassert>
#include <cmath>
#include <memory>
#include <stdexcept>

#include <pacbio/consensus/ModelConfig.h>
#include <pacbio/consensus/Read.h>

#include "../ModelFactory.h"
#include "../Recursor.h"

namespace PacBio {
namespace Consensus {
namespace {

class SP1C1PwModel : public ModelConfig
{
    REGISTER_MODEL(SP1C1PwModel);

public:
    static std::string Name() { return "S/P1-C1"; }
    SP1C1PwModel(const SNR& snr);
    std::unique_ptr<AbstractRecursor> CreateRecursor(std::unique_ptr<AbstractTemplate>&& tpl,
                                                     const MappedRead& mr, double scoreDiff) const;
    std::vector<TemplatePosition> Populate(const std::string& tpl) const;
    double SubstitutionRate(uint8_t prev, uint8_t curr) const;

private:
    SNR snr_;
    double ctx_trans[16][4];
};

REGISTER_MODEL_IMPL(SP1C1PwModel);

// TODO(lhepler) comments regarding the CRTP
class SP1C1PwRecursor : public Recursor<SP1C1PwRecursor>
{
public:
    SP1C1PwRecursor(std::unique_ptr<AbstractTemplate>&& tpl, const MappedRead& mr,
                    double scoreDiff);
    static inline std::vector<uint8_t> EncodeRead(const MappedRead& read);
    static inline double EmissionPr(MoveType move, uint8_t emission, uint8_t prev, uint8_t curr);
    virtual double UndoCounterWeights(size_t nEmissions) const;
};

double emissionPmf[3][16][12] = {
    {// matchPmf
     {0.0543907091, 0.00118105764, 0.000382983194, 3.58831936e-05, 0.0787276371, 0.000622693691,
      0.00177266462, 7.30206963e-05, 0.857213707, 0.00400822291, 0.00150157152, 2.8381047e-05},
     {0.0055860155, 0.0157782006, 6.44273383e-05, 8.10488125e-05, 0.0186198471, 0.0427286261,
      0.00036749518, 2.79183923e-05, 0.0275017396, 0.888652013, 0.000390106147, 0.000134245264},
     {0.000996326003, 3.34858205e-05, 0.0187173517, 0.00353803048, 0.000430661139, 2.55601554e-05,
      0.0763603611, 0.0027597122, 0.000100275084, 0.000302167608, 0.887112048, 0.00954793666},
     {6.93529827e-05, 0.000234805316, 0.00918760155, 0.0188246595, 0.000133979742, 5.35596051e-05,
      0.037829824, 0.0513944168, 0.000443919338, 0.000499134251, 0.0838643631, 0.797398542},
     {0.0211478877, 0.00104524662, 0.000555597041, 5.59026608e-05, 0.0679689823, 0.000573656121,
      0.00189533976, 0.000118799448, 0.902848383, 0.00213901069, 0.00153967769, 4.26151191e-05},
     {0.0377987555, 0.0125139654, 3.71966033e-05, 6.94120376e-05, 0.0153067983, 0.0368702266,
      5.46941729e-05, 0.000149187915, 0.0268092521, 0.870037646, 6.1350855e-05, 0.000227886851},
     {7.52743815e-05, 1.32116401e-05, 0.00883429388, 0.00139351662, 0.000396326941, 2.85378675e-05,
      0.035620235, 0.0018254117, 0.000476205362, 0.000254331605, 0.944035349, 0.00699222749},
     {0.000305355542, 6.64715114e-05, 0.00913797108, 0.0212017183, 0.000100541153, 5.43482416e-05,
      0.0414473987, 0.0538036816, 0.00012658029, 0.000200816731, 0.0843830829, 0.789091478},
     {0.0106494953, 0.000484780393, 0.000207560929, 2.76583948e-05, 0.0344126914, 0.000383155529,
      0.000392168446, 6.55213003e-05, 0.949962077, 0.00279781434, 0.000453590007, 9.31326802e-05},
     {0.002741112, 0.00712465078, 4.29407226e-05, 5.18024622e-05, 0.00890334809, 0.0228005019,
      0.000131607088, 6.58770968e-05, 0.0226625224, 0.935288757, 5.79262767e-05, 7.43168101e-05},
     {0.0346525057, 6.1705419e-05, 0.00544745777, 0.00107176568, 0.000512105152, 2.79664738e-05,
      0.0288959783, 0.00125749299, 0.000507579124, 3.24626117e-05, 0.919845946, 0.00762266569},
     {0.000113088237, 2.14624008e-05, 0.004055471, 0.00973693427, 0.000239038873, 7.30410119e-05,
      0.0178232118, 0.0293473327, 0.0003787127, 0.000374716232, 0.058902674, 0.878860615},
     {0.0187572489, 0.000712242403, 0.0003101017, 7.34068979e-05, 0.063307308, 0.000882336116,
      0.00100577979, 0.000113720683, 0.909653227, 0.00415482808, 0.000765781143, 0.000196667604},
     {0.00298119111, 0.00743063235, 3.13103138e-05, 4.28115293e-05, 0.00883153416, 0.0205039058,
      9.45613468e-05, 7.26491624e-05, 0.0192161533, 0.940105072, 5.70121251e-05, 0.000562631048},
     {0.000310070973, 2.06682461e-05, 0.00942676852, 0.00160926721, 0.000226519855, 0.00014211385,
      0.0410029387, 0.00146498469, 0.000430830509, 0.000133300052, 0.938194341, 0.00697031608},
     {0.0318414178, 0.000641106881, 0.00671853079, 0.00868211747, 0.00286110639, 0.00105850401,
      0.0194770994, 0.0270219904, 0.0309739354, 0.0291045882, 0.0852847472, 0.756279652}},
    {// branchPmf
     {0.402650671, 0.000788139172, 0.000788139172, 0.000788139172, 0.225459136, 0.000788139172,
      0.000788139172, 0.000788139172, 0.360856245, 0.000788139172, 0.000788139172, 0.000788139172},
     {0.0017641894, 0.144737358, 0.0017641894, 0.0017641894, 0.0017641894, 0.168599205,
      0.0017641894, 0.0017641894, 0.0017641894, 0.661964786, 0.0017641894, 0.0017641894},
     {0.000759762859, 0.000759762859, 0.456336636, 0.000759762859, 0.000759762859, 0.000759762859,
      0.175244525, 0.000759762859, 0.000759762859, 0.000759762859, 0.357782159, 0.000759762859},
     {0.00408848855, 0.00408848855, 0.00408848855, 0.206901716, 0.00408848855, 0.00408848855,
      0.00408848855, 0.12813567, 0.00408848855, 0.00408848855, 0.00408848855, 0.607723774},
     {0.17585333, 0.000206064317, 0.000206064317, 0.000206064317, 0.146359133, 0.000206064317,
      0.000206064317, 0.000206064317, 0.674902637, 0.000206064317, 0.000206064317, 0.000206064317},
     {0.000349342975, 0.0435338982, 0.000349274831, 0.000349274831, 0.000352763054, 0.0548921126,
      0.000349274831, 0.000349274831, 0.000352824232, 0.896677036, 0.000349274831, 0.000349274831},
     {0.000325735755, 0.000325735755, 0.400246959, 0.000325735755, 0.000325735755, 0.000325735755,
      0.119876923, 0.000325735755, 0.000325735755, 0.000325735755, 0.475315818, 0.000325735755},
     {0.00181798906, 0.00181798906, 0.00181798906, 0.159246584, 0.00181798906, 0.00181798906,
      0.00181798906, 0.134022191, 0.00181798906, 0.00181798906, 0.00181798906, 0.681279378},
     {0.117796216, 0.000209596205, 0.000209596205, 0.000209596205, 0.0974157381, 0.000209596205,
      0.000209596205, 0.000209596205, 0.781853699, 0.000209596205, 0.000209596205, 0.000209596205},
     {0.000418677273, 0.0494190257, 0.000418677273, 0.000418677273, 0.000418677273, 0.0712375684,
      0.000418677273, 0.000418677273, 0.000418677273, 0.873481924, 0.000418677273, 0.000418677273},
     {0.000387984207, 0.00038674418, 0.216752879, 0.00038674418, 0.000390254155, 0.00038674418,
      0.0865639685, 0.00038674418, 0.000454405893, 0.00038674418, 0.691196322, 0.00038674418},
     {0.000701320462, 0.000701320462, 0.000701320462, 0.0502719436, 0.000701320462, 0.000701320462,
      0.000701320462, 0.0560329465, 0.000701320462, 0.000701320462, 0.000701320462, 0.883876623},
     {0.126295452, 0.000168053521, 0.000168053521, 0.000168053521, 0.124169335, 0.000168053521,
      0.000168053521, 0.000168053521, 0.747182464, 0.000168053521, 0.000168053521, 0.000168053521},
     {0.000334907844, 0.0352349889, 0.000334907844, 0.000334907844, 0.000334907844, 0.0547723142,
      0.000334907844, 0.000334907844, 0.000334907844, 0.905303987, 0.000334907844, 0.000334907844},
     {0.000275010775, 0.000275010775, 0.178628443, 0.000275010775, 0.000275010775, 0.000275010775,
      0.107878621, 0.000275010775, 0.000275010775, 0.000275010775, 0.709642786, 0.000275010775},
     {0.000157276064, 0.000157265561, 0.000157265561, 0.0495289931, 0.000157493608, 0.000157265561,
      0.000157265561, 0.068659867, 0.00015982566, 0.000157265561, 0.000157265561, 0.879606623}},
    {// stickPmf
     {0.00064728704, 0.0596681371, 0.420388648, 0.0225429179, 0.00064728704, 0.0321671803,
      0.150532732, 0.00546031026, 0.00064728704, 0.105966262, 0.16867811, 0.0294174062},
     {0.13642138, 0.00026463291, 0.3254018, 0.0327996166, 0.0528098783, 0.00026463291, 0.106487697,
      0.0163081116, 0.199882868, 0.00026463291, 0.0717078873, 0.0560636973},
     {0.451653229, 0.021804267, 0.00113545049, 0.0991490487, 0.11054055, 0.0150326361,
      0.00113545049, 0.048473889, 0.132365876, 0.0276019919, 0.00113545049, 0.0842949087},
     {0.2451112, 0.0231884532, 0.229415647, 0.000467208683, 0.073234583, 0.0147028421, 0.0960201117,
      0.000467208683, 0.2411643, 0.030895637, 0.0425295569, 0.000467208683},
     {0.000372460824, 0.0296329229, 0.486799606, 0.0386890269, 0.000372460824, 0.0112233407,
      0.0998621603, 0.00954916067, 0.000372460824, 0.208986265, 0.0845404017, 0.0277374286},
     {0.106556239, 0.000174175935, 0.451010352, 0.0394287585, 0.0652310332, 0.000205462106,
      0.146827931, 0.00880546928, 0.0818660516, 0.000174501663, 0.0835142586, 0.0153574667},
     {0.352395982, 0.0193700656, 0.000432660357, 0.0368847669, 0.117183129, 0.00917199479,
      0.000432660357, 0.0228426438, 0.13062321, 0.265215317, 0.000432660357, 0.042851608},
     {0.180027755, 0.0171167783, 0.266006465, 0.000321354055, 0.0579874278, 0.0181050892,
      0.0566869852, 0.000321354055, 0.072022314, 0.28971404, 0.0397623128, 0.000321354055},
     {0.00067477619, 0.0282203757, 0.450970186, 0.024543701, 0.00067477619, 0.0200758813, 0.112079,
      0.0142832997, 0.00067477619, 0.0756798115, 0.181620485, 0.0871290499},
     {0.0965326046, 0.000144661195, 0.355601786, 0.0251369011, 0.0354930031, 0.000144661195,
      0.154218608, 0.0131964029, 0.0400750228, 0.000144661195, 0.238269467, 0.0403189155},
     {0.382075733, 0.0379084713, 0.00149094741, 0.0488326345, 0.131159721, 0.0125224015,
      0.00117413855, 0.0266566486, 0.136996382, 0.0590747257, 0.0010665174, 0.156008124},
     {0.263566411, 0.0153299798, 0.272657286, 0.000498991524, 0.0629633648, 0.0135060969,
      0.101120793, 0.000498991524, 0.0397263813, 0.0133728902, 0.213764865, 0.000498991524},
     {0.000362016328, 0.0189403807, 0.287369129, 0.025322788, 0.000362016328, 0.0118983173,
      0.0764743803, 0.0236702448, 0.000362016328, 0.0640516336, 0.176192467, 0.313184529},
     {0.10886326, 0.000207874101, 0.251891226, 0.0192646261, 0.0509793264, 0.000207874101,
      0.0673461498, 0.026757404, 0.0505362974, 0.000207874101, 0.117047063, 0.305651655},
     {0.255017034, 0.0186115835, 0.00051903911, 0.0371019097, 0.0760543087, 0.00529527597,
      0.00051903911, 0.0520188025, 0.0554503478, 0.0233148974, 0.00051903911, 0.472983527},
     {0.139306938, 0.0127162111, 0.249078346, 0.000313813602, 0.0446178508, 0.00249989994,
      0.225869412, 0.000335212176, 0.0158939066, 0.0138694622, 0.293623933, 0.000351423611}}};

double transProbs[16][3][4] = {
    // Fit for context:  AA
    {{-10.7164057204031, 3.98782028078272, -0.795772558131198, 0.0520960085895671},
     {-3.79344097157089, 1.59265978257384, -0.539360923580698, 0.043272767385256},
     {-0.729644826161087, 0.762225942055282, -0.400343404412879, 0.0355712633597535}},
    // Fit for context:  AC
    {{1.03771972835866, -2.49145042648652, 0.34098881696229, -0.0157027055609317},
     {-3.98420992272506, 0.340657599549189, -0.0574974900608034, 0.00522719656986467},
     {6.33767747763427, -4.6656127013522, 0.65193051609116, -0.0279450498720324}},
    // Fit for context:  AG
    {{-6.88580643242718, 1.78348203308422, -0.310479305498611, 0.0154969506485355},
     {-0.670618235698212, -1.08964353604371, 0.0835579525904027, -0.00176415163842159},
     {2.31419630420976, -1.54246321571859, 0.0819044932668622, 0.00450759967636443}},
    // Fit for context:  AT
    {{-20.8479717539253, 7.06460395703697, -1.09103210628126, 0.0561984506179333},
     {-3.06677673817856, 0.834776554999091, -0.322562868416469, 0.0273403551676632},
     {0.537620013415359, -1.23386870552877, 0.152594436335945, -0.00461486493053618}},
    // Fit for context:  CA
    {{4.78368631815138, -4.00742697182602, 0.692392679917472, -0.0387071521072361},
     {13.165287679086, -9.16763194136871, 1.63167722539609, -0.0931818706867695},
     {7.01948844820159, -4.3376675495004, 0.627336658728689, -0.0316456031308864}},
    // Fit for context:  CC
    {{-8.77238434084282, 3.27523505257414, -0.634976376627753, 0.0399134279353951},
     {1.56048428369237, -2.46095884215399, 0.438467999720504, -0.0235192955843767},
     {3.71783193563369, -3.63878080289239, 0.6574662180178, -0.0404205355221705}},
    // Fit for context:  CG
    {{0.278115820030689, -2.54372507566517, 0.487769787763806, -0.0268273405745096},
     {-4.32452890483172, 1.52002559418139, -0.433284183208664, 0.0317294163555715},
     {3.2609938004437, -2.77675914998181, 0.357512800849406, -0.0143120367646964}},
    // Fit for context:  CT
    {{0.237435211229304, -2.04291546469601, 0.215679228976178, -0.00201889481644293},
     {3.12563572278193, -3.37287559749943, 0.58315530051726, -0.0315771739183761},
     {0.725345043690616, -1.18223571570362, 0.131336380314601, -0.00299717034284512}},
    // Fit for context:  GA
    {{-2.93470047931741, 0.392785476608932, -0.0972713957332171, 0.00600673674952029},
     {-2.11849936693723, -0.624625671052111, 0.0722732053541029, -0.00333038689388883},
     {4.94494589866005, -3.23011237741411, 0.365270811878853, -0.0125339208035518}},
    // Fit for context:  GC
    {{8.03871240476057, -7.44153071667942, 1.54646574727136, -0.105039746390313},
     {3.32926069403602, -3.63671734684364, 0.701663733962071, -0.0429669114161193},
     {-1.51948841556784, -0.791288352214078, 0.0152394384043856, 0.00403538236067623}},
    // Fit for context:  GG
    {{-12.6591059309602, 5.86961027493033, -1.15465786228539, 0.0713094366505675},
     {2.80600271745552, -2.77055103852379, 0.359990118866213, -0.018180077402894},
     {2.63895884014553, -2.27535564528271, 0.335735824534502, -0.017550729360956}},
    // Fit for context:  GT
    {{1.14471594698739, -4.0789187020829, 0.953045151184405, -0.0680000635589475},
     {-5.5771866979916, 1.85488371070969, -0.4401942689019, 0.030610804622129},
     {-2.53887499218357, 0.365206494615073, -0.123958047360946, 0.0114253735360822}},
    // Fit for context:  TA
    {{2.24564114501129, -2.91115664721317, 0.570242197766434, -0.0360904257909976},
     {-0.413582967274702, -0.823016949355163, 0.0168579606583304, 0.00625106602191152},
     {3.73291260403721, -2.36929335171133, 0.274469872231993, -0.0124787103822281}},
    // Fit for context:  TC
    {{-3.28147281314861, 0.0411668635160044, 0.00682506501544733, -0.00189036912903177},
     {1.18104199742521, -2.16309184689531, 0.374889789695479, -0.0201388239490969},
     {-0.13456229183887, -1.41430659385487, 0.0646210909147089, 0.00751742144514811}},
    // Fit for context:  TG
    {{-0.711463860885121, -0.610939949545945, -0.00176541882451099, 0.00629052344632413},
     {-1.85625082545814, 0.0938645386425038, -0.136268434318324, 0.00998536166973436},
     {1.24920620281638, -1.651780809373, 0.197337307368793, -0.00962535202781297}},
    // Fit for context:  TT
    {{1.93423108123255, -2.91070572158293, 0.61339237610532, -0.04207068301675},
     {-3.7635265726798, 0.966948054199674, -0.278953499558314, 0.0217760765687873},
     {-2.10705727831087, 0.31973388808551, -0.135465925089379, 0.0125410623312247}}};

SP1C1PwModel::SP1C1PwModel(const SNR& snr) : snr_(snr)
{
    const double snr1 = snr_.A, snr2 = snr1 * snr1, snr3 = snr2 * snr1;
    for (int ctx = 0; ctx < 16; ++ctx) {
        double sum = 1.0;
        ctx_trans[ctx][0] = 1.0;
        for (size_t j = 0; j < 3; ++j) {
            double xb = transProbs[ctx][j][0] + snr1 * transProbs[ctx][j][1] +
                        snr2 * transProbs[ctx][j][2] + snr3 * transProbs[ctx][j][3];
            xb = std::exp(xb);
            ctx_trans[ctx][j + 1] = xb;
            sum += xb;
        }
        for (size_t j = 0; j < 4; ++j)
            ctx_trans[ctx][j] /= sum;
    }
}

std::unique_ptr<AbstractRecursor> SP1C1PwModel::CreateRecursor(
    std::unique_ptr<AbstractTemplate>&& tpl, const MappedRead& mr, double scoreDiff) const
{
    return std::unique_ptr<AbstractRecursor>(
        new SP1C1PwRecursor(std::forward<std::unique_ptr<AbstractTemplate>>(tpl), mr, scoreDiff));
}

std::vector<TemplatePosition> SP1C1PwModel::Populate(const std::string& tpl) const
{
    std::vector<TemplatePosition> result;

    if (tpl.empty()) return result;

    result.reserve(tpl.size());

    // Calculate probabilities in all 16 Contexts
    uint8_t prev = detail::TranslationTable[static_cast<uint8_t>(tpl[0])];

    for (size_t i = 1; i < tpl.size(); ++i) {
        const uint8_t curr = detail::TranslationTable[static_cast<uint8_t>(tpl[i])];
        if (curr > 3) throw std::invalid_argument("invalid character in sequence!");
        const auto row = (prev << 2) | curr;
        const auto params = ctx_trans[row];
        result.emplace_back(TemplatePosition{
            tpl[i - 1], prev,
            params[0],  // match
            params[1],  // branch
            params[2],  // stick
            params[3]   // deletion
        });
        prev = curr;
    }
    result.emplace_back(TemplatePosition{tpl.back(), prev, 1.0, 0.0, 0.0, 0.0});

    return result;
}

double SP1C1PwModel::SubstitutionRate(uint8_t prev, uint8_t curr) const
{
    const auto row = (prev << 2) | curr;
    double eps = 0.0;
    for (uint8_t pw = 0; pw < 3; ++pw)
        for (uint8_t bp = 0; bp < 4; ++bp)
            if (bp != curr)
                eps += emissionPmf[static_cast<uint8_t>(MoveType::MATCH)][row][(pw << 2) | bp];
    return eps / (3 * 4);
}

SP1C1PwRecursor::SP1C1PwRecursor(std::unique_ptr<AbstractTemplate>&& tpl, const MappedRead& mr,
                                 double scoreDiff)
    : Recursor<SP1C1PwRecursor>(std::forward<std::unique_ptr<AbstractTemplate>>(tpl), mr, scoreDiff)
{
}

std::vector<uint8_t> SP1C1PwRecursor::EncodeRead(const MappedRead& read)
{
    std::vector<uint8_t> result;

    for (size_t i = 0; i < read.Length(); ++i) {
        uint8_t pw = std::max(2, read.PulseWidth[i] - 1);
        uint8_t em = (pw << 2) | detail::TranslationTable[static_cast<uint8_t>(read.Seq[i])];
        if (em > 11) throw std::runtime_error("read encoding error!");
        result.emplace_back(em);
    }

    return result;
}

double SP1C1PwRecursor::EmissionPr(MoveType move, uint8_t emission, uint8_t prev, uint8_t curr)
{
    assert(move != MoveType::DELETION);

    auto icurr = detail::TranslationTable[static_cast<uint8_t>(curr)];
    auto iprev = detail::TranslationTable[static_cast<uint8_t>(prev)];
    const auto row = (prev << 2) | curr;

    if (curr > 3 || prev > 3 || row > 15 || emission > 11)
        throw std::invalid_argument("invalid character in sequence");

    return emissionPmf[static_cast<uint8_t>(move)][row][emission];
}

double SP1C1PwRecursor::UndoCounterWeights(const size_t nEmissions) const { return 0; }
}  // namespace anonymous
}  // namespace Consensus
}  // namespace PacBio
