
#include <cassert>
#include <cmath>
#include <stdexcept>

#include <pacbio/consensus/ModelConfig.h>

#include "../ModelFactory.h"

namespace PacBio {
namespace Consensus {
namespace {

class SP1C1BetaNoCovModel : public ModelConfig
{
    REGISTER_MODEL(SP1C1BetaNoCovModel);

public:
    SP1C1BetaNoCovModel(const SNR& snr);
    std::vector<TemplatePosition> Populate(const std::string& tpl) const;
    double BaseEmissionPr(MoveType move, char from, char to) const;
    double CovEmissionPr(MoveType move, uint8_t cov, char from, char to) const;
    double UndoCounterWeights(size_t nEmissions) const;

    static std::string Name() { return "S/P1-C1/beta"; }
private:
    SNR snr_;
};
    REGISTER_MODEL_IMPL(SP1C1BetaNoCovModel);
    
namespace {

    double matchPmf[16][12]  = {
        
        {   0.0211777412,   0.00102485719,  0.000907836905,  0.000238422717,    0.0773229067,  0.000758837513,   0.00136554876,  0.000168820345,     0.891709718,   0.00360899779,   0.00158524702,  5.32426587e-05},
        {  0.00537180284,    0.0149743037,  2.79650478e-05,  5.09732459e-05,    0.0166574855,    0.0406654363,  5.90658338e-05,   2.4948241e-05,    0.0219705336,     0.899931921,  5.50933599e-05,  0.000124645151},
        {  0.00170237866,  5.95513352e-05,    0.0191407533,   0.00254654585,  0.000865975116,  7.27364202e-05,    0.0783635336,   0.00260869637,  0.000632140758,  0.000443417548,     0.883598012,   0.00987025121},
        {  0.00103758356,  0.000191944259,    0.0102963242,    0.0194838029,  0.000761268338,  0.000136942735,    0.0376706256,    0.0500321172,   0.00356692486,  0.000536730026,    0.0862644288,     0.789939683},
        {   0.0199835624,    0.0010550134,   0.00153067068,  8.77401919e-05,    0.0690489616,  0.000944633161,   0.00190205798,  9.10275561e-05,      0.89855721,   0.00458194727,   0.00205691848,  7.39637544e-05},
        {  0.00421231831,    0.0133480261,  3.81009704e-05,  0.000131973597,    0.0146219805,    0.0364336269,  8.06911731e-05,  5.96651758e-05,     0.024167857,      0.90670559,   4.6826163e-05,  7.10424248e-05},
        { 0.000538458045,  3.08272645e-05,   0.00913007014,   0.00156805679,  0.000386850452,  2.92236621e-05,    0.0376140921,   0.00159616396,  0.000259481971,  0.000671036294,     0.940772546,   0.00733430107},
        {   0.0015197784,  0.000585688168,    0.0122160729,    0.0201279039,  0.000586363901,  0.000255349978,     0.038124692,    0.0513654305,   0.00204314351,   0.00695543173,    0.0911679779,     0.774954556},
        {  0.00709883184,  0.000258243659,  5.98534791e-05,  0.000118507289,     0.034477579,  0.000390231005,  0.000525778016,  4.72301004e-05,     0.954174776,   0.00243862296,  0.000150969726,  0.000170865024},
        {  0.00211225625,   0.00673894894,  2.09334207e-05,  4.42380626e-05,   0.00818130178,    0.0231726168,  2.30870721e-05,   3.9507544e-05,    0.0180040447,     0.941547012,  2.29898029e-05,  2.30212095e-05},
        { 0.000195034323,  7.39890611e-05,   0.00681678257,  0.000844238061,  0.000755731698,   5.6453677e-05,    0.0327089067,   0.00140941965,  0.000848472508,   0.00034714654,     0.947849578,   0.00801064817},
        { 0.000568109193,  0.000384186141,   0.00560794136,   0.00874837604,  0.000432941004,  8.77270929e-05,    0.0203293079,    0.0277817499,    0.0013064593,   0.00126309277,    0.0624479811,     0.870951104},
        {   0.0158643647,    0.0011391803,  0.000146814009,  6.92510745e-05,    0.0665749076,  0.000654579906,  0.000151406817,  6.87960117e-05,     0.911141521,   0.00370279464,  0.000345665467,  5.55445101e-05},
        {  0.00108001387,   0.00743327205,  2.43178341e-05,  3.41203097e-05,   0.00895221141,    0.0221626362,  2.61037838e-05,  2.66454044e-05,     0.013295466,      0.94681461,  3.22423684e-05,  2.72668488e-05},
        { 8.19328226e-05,  2.31268536e-05,   0.00962755268,   0.00143417258,  7.28247738e-05,  3.06107669e-05,    0.0389195848,   0.00132672874,  0.000316297836,   0.00014138768,     0.942428219,   0.00550970209},
        {  0.00363281169,  0.000455550484,    0.0085287215,   0.00844940641,   0.00452114198,   0.00133253568,    0.0232054079,    0.0261483936,    0.0309854656,    0.0314565523,    0.0897107295,      0.77150151}
    };
    
    double stickPmf[16][12]  = {
        
        { 0.000866227151,    0.0384633107,     0.447105181,    0.0332423912,  0.000866227151,    0.0185200919,     0.154388841,   0.00671901827,  0.000866227151,     0.103691041,     0.154467194,    0.0364731132},
        {    0.127340753,  0.000337321807,     0.355219284,    0.0230841173,    0.0558078664,  0.000337321807,      0.11842685,    0.0222813115,     0.167621201,  0.000337321807,    0.0808297879,    0.0466902542},
        {    0.489270675,    0.0374651545,   0.00164127584,     0.113499835,    0.0461136089,    0.0180310781,   0.00164127584,    0.0555116242,    0.0675350456,    0.0322357299,   0.00164127584,     0.127207042},
        {    0.352700509,    0.0241021258,     0.268622934,  0.000682356135,    0.0862591065,    0.0143600503,    0.0542040169,  0.000682356135,     0.115444992,    0.0350503032,     0.043797114,  0.000682356135},
        { 0.000417178657,    0.0110266653,      0.47365139,    0.0340769517,  0.000417178657,    0.0175417912,    0.0898791759,   0.00796968776,  0.000417178657,     0.219219865,    0.0971379184,    0.0461591261},
        {    0.130066962,  0.000210747721,     0.434023471,    0.0352037462,    0.0624526069,  0.000199682154,     0.140225078,   0.00970936447,    0.0812940852,   0.00020867685,    0.0846717562,    0.0207436422},
        {    0.330913973,    0.0322787388,  0.000432602989,    0.0437579091,    0.0964682768,    0.0107165158,  0.000432602989,    0.0121924327,     0.128840917,     0.283915245,  0.000432602989,    0.0574551678},
        {    0.196356101,    0.0110578196,     0.212267662,  0.000410911328,    0.0802440344,   0.00957896446,    0.0513866696,  0.000410911328,    0.0945986981,     0.300454931,     0.040767829,  0.000410911328},
        { 0.000813649084,    0.0301918697,     0.441343789,     0.029889749,  0.000813649084,    0.0228402736,    0.0822620208,    0.0192980525,  0.000813649084,    0.0778764138,     0.196694915,    0.0930937241},
        {   0.0996314323,  0.000174917932,     0.335048812,    0.0254566895,    0.0347380314,  0.000174917932,     0.160954241,   0.00883477189,    0.0354765481,  0.000174917932,     0.251707724,    0.0467524064},
        {    0.438750692,    0.0168376034,   0.00318534548,    0.0578446031,     0.120484201,    0.0121358881,   0.00117957649,    0.0184256875,     0.121962405,    0.0365567293,   0.00112276195,     0.166152865},
        {    0.318576271,    0.0147739813,     0.272140807,  0.000813586495,    0.0753540565,    0.0109776218,    0.0989231312,  0.000813586495,    0.0710644231,    0.0235848894,     0.108096126,  0.000813586495},
        { 0.000389537478,    0.0188425886,     0.232704528,    0.0281111646,  0.000389537478,    0.0128789394,    0.0862924662,    0.0235929319,  0.000389537478,    0.0893374604,     0.185372201,      0.31975142},
        {    0.114698541,  0.000254743265,     0.246497098,    0.0229094563,    0.0520752058,  0.000254743265,    0.0724632225,    0.0240733167,    0.0497056619,  0.000254743265,     0.106579743,     0.308959808},
        {    0.232394001,    0.0160005942,  0.000522491156,    0.0372065606,    0.0528093249,   0.00791028541,  0.000522491156,    0.0235149367,    0.0671116877,    0.0292869378,  0.000522491156,     0.529585742},
        {    0.222439211,    0.0152416067,     0.229205253,  0.000437240262,    0.0417765078,   0.00436581344,     0.209675353,  0.000686694923,    0.0202554185,   0.00819819691,      0.24500285,  0.000532632651}
    };
    
    double branchPmf[16][12]  = {
        
        {    0.565418764,   0.00110089385,   0.00110089385,   0.00110089385,     0.197404137,   0.00110089385,   0.00110089385,   0.00110089385,     0.221764586,   0.00110089385,   0.00110089385,   0.00110089385},
        {  0.00387869271,     0.146141799,   0.00387869271,   0.00387869271,   0.00387869271,     0.218560354,   0.00387869271,   0.00387869271,   0.00387869271,     0.580996149,   0.00387869271,   0.00387869271},
        { 0.000851475542,  0.000851475542,     0.362904209,  0.000851475542,  0.000851475542,  0.000851475542,     0.163774478,  0.000851475542,  0.000851475542,  0.000851475542,     0.461400656,  0.000851475542},
        {   0.0078865456,    0.0078865456,    0.0078865456,      0.38486111,    0.0078865456,    0.0078865456,    0.0078865456,     0.184853597,    0.0078865456,    0.0078865456,    0.0078865456,     0.319873654},
        {    0.202279839,   0.00023436716,   0.00023436716,   0.00023436716,     0.138071097,   0.00023436716,   0.00023436716,   0.00023436716,     0.656367924,   0.00023436716,   0.00023436716,   0.00023436716},
        { 0.000452506215,    0.0356763182,  0.000450157255,  0.000450157255,  0.000450799758,    0.0631037693,  0.000450157255,  0.000450157255,  0.000450979104,     0.894913898,  0.000450157255,  0.000450157255},
        { 0.000357095193,  0.000357095193,     0.320220827,  0.000357095193,  0.000357095193,  0.000357095193,     0.138074516,  0.000357095193,  0.000357095193,  0.000357095193,     0.536705324,  0.000357095193},
        {  0.00287243333,   0.00287243333,   0.00287243333,     0.295837336,   0.00287243333,   0.00287243333,   0.00287243333,     0.260637474,   0.00287243333,   0.00287243333,   0.00287243333,     0.403311123},
        {    0.115824458,   0.00023689823,   0.00023689823,   0.00023689823,     0.111305013,   0.00023689823,   0.00023689823,   0.00023689823,     0.769553953,   0.00023689823,   0.00023689823,   0.00023689823},
        { 0.000614918194,    0.0680227315,  0.000614918194,  0.000614918194,  0.000614918194,    0.0634119486,  0.000614918194,  0.000614918194,  0.000614918194,     0.859956465,  0.000614918194,  0.000614918194},
        {  0.00077097941,  0.000765635228,     0.283170291,  0.000765635228,  0.000765643898,  0.000765635228,     0.133517704,  0.000765635228,  0.000855447782,  0.000765635228,     0.572497946,  0.000765635228},
        {  0.00120382506,   0.00120382506,   0.00120382506,     0.072251989,   0.00120382506,   0.00120382506,   0.00120382506,    0.0815177212,   0.00120382506,   0.00120382506,   0.00120382506,     0.829376739},
        {    0.142075363,  0.000208322303,  0.000208322303,  0.000208322303,     0.108912412,  0.000208322303,  0.000208322303,  0.000208322303,     0.746095712,  0.000208322303,  0.000208322303,  0.000208322303},
        { 0.000400857454,    0.0354909197,  0.000400857454,  0.000400857454,  0.000400857454,    0.0555005319,  0.000400857454,  0.000400857454,  0.000400857454,     0.903396544,  0.000400857454,  0.000400857454},
        { 0.000321310511,  0.000321310511,     0.175736539,  0.000321310511,  0.000321310511,  0.000321310511,     0.127328924,  0.000321310511,  0.000321310511,  0.000321310511,     0.692436191,  0.000321310511},
        { 0.000234864829,  0.000227861682,  0.000227861682,    0.0548439005,  0.000227871191,  0.000227861682,  0.000227861682,    0.0927050557,  0.000668124125,  0.000227861682,  0.000227861682,     0.848813705}
    };
    
    double transProbs[16][4] = {
        
        {    0.915777926,    0.0123733701,    0.0157194866,    0.0561292169}, // CTX - 0
        {    0.905871596,   0.00402895547,    0.0466599988,      0.04343945}, // CTX - 1
        {     0.92438608,    0.0204745892,    0.0103948579,    0.0447444731}, // CTX - 2
        {    0.928494954,   0.00180444283,     0.021424948,    0.0482756554}, // CTX - 3
        {    0.878111455,    0.0632856091,    0.0352759759,    0.0233269601}, // CTX - 4
        {    0.863639621,    0.0308026018,    0.0703002903,    0.0352574872}, // CTX - 5
        {    0.916979387,    0.0350598608,    0.0285819733,    0.0193787788}, // CTX - 6
        {    0.930703911,    0.0061841555,    0.0421021006,    0.0210098334}, // CTX - 7
        {    0.871697113,    0.0658627101,    0.0189006855,    0.0435394913}, // CTX - 8
        {    0.862855078,    0.0202377278,    0.0708118667,     0.046095328}, // CTX - 9
        {    0.916806423,    0.0189469708,    0.0134985531,    0.0507480534}, // CTX - 10
        {    0.917674688,    0.0138903534,    0.0197766299,    0.0486583287}, // CTX - 11
        {    0.821816096,    0.0681867639,    0.0359006218,    0.0740965186}, // CTX - 12
        {    0.828217313,      0.03948131,    0.0616054503,    0.0706959267}, // CTX - 13
        {    0.853523554,    0.0473090531,    0.0284985331,    0.0706688594}, // CTX - 14
        {    0.852304306,    0.0569130618,    0.0296696165,    0.0611130162} // CTX - 15
    };
    
}

SP1C1BetaNoCovModel::SP1C1BetaNoCovModel(const SNR& snr) : snr_(snr) {}
std::vector<TemplatePosition> SP1C1BetaNoCovModel::Populate(const std::string& tpl) const
{
    std::vector<TemplatePosition> result;

    if (tpl.empty()) return result;
    
    uint8_t prev = detail::TranslationTable[static_cast<uint8_t>(tpl[0])];
    
    for (size_t i = 1; i < tpl.size(); ++i) {
        const uint8_t cur = detail::TranslationTable[static_cast<uint8_t>(tpl[i])];
        if (cur > 3) throw std::invalid_argument("invalid character in sequence!");
        const auto row = (prev << 2) | cur;
        const auto params = transProbs[row];

        result.emplace_back(TemplatePosition{
            tpl[i - 1],
            params[0],  // match
            params[1],  // branch
            params[2],  // stick
            params[3]   // deletion
        });
        prev = cur;
    }

    result.emplace_back(TemplatePosition{tpl.back(), 1.0, 0.0, 0.0, 0.0});

    return result;
}

double SP1C1BetaNoCovModel::BaseEmissionPr(MoveType move, const char from, const char to) const
{
    // All emissions are now "Covariate Emissions"
    assert(move != MoveType::DELETION);
    return 1.0;
}

double SP1C1BetaNoCovModel::CovEmissionPr(MoveType move, uint8_t nuc, char from, char to) const
{
    auto ito = detail::TranslationTable[static_cast<uint8_t>(to)];
    auto ifrom = detail::TranslationTable[static_cast<uint8_t>(from)];
    ifrom = ifrom > 3 ? 0 : ifrom;
    ito = ito > 3 ? 0 : ito;
    const auto row = (ifrom << 2) | ito;
    
    if (ito > 3 || nuc > 12 || ifrom > 3) throw std::invalid_argument("invalid character in sequence");

    if (move == MoveType::BRANCH)
        return branchPmf[row][nuc];
    else if (move == MoveType::STICK)
        return stickPmf[row][nuc];
    else if (move == MoveType::MATCH)
        return matchPmf[row][nuc];

    throw std::invalid_argument("unknown move type!");
}

double SP1C1BetaNoCovModel::UndoCounterWeights(const size_t nEmissions) const { return 0; }
}  // namespace anonymous
}  // namespace Consensus
}  // namespace PacBio
